{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"AWS IoT Framework This frameworks intentions is to simplify the development of back-end applications based on AWS Lamda functions. In addition the goal of this repo is to provide a capable API which allows an easy implementation of Alexa Skills. This repository complements the ESP IoT Framework . Motivation Overview The networking of sensors and actuators via the internet is becoming increasingly important in industry, but also in the private sector. In this project work it will be shown how a processing chain from the sensor to the cloud service (AWS) can be realized practically. The project aims to provide a valuable overview of what is possible with embedded/connected IoT devices that can transmit data to the cloud. In addition, the projects goal was to provide a secure connection to AWS. Please be aware that this project is a feasibility study. It does not provide code which is ready for production, or similar. Further information about the future intentions of this project can be found here. OpenSource This project can be accessed via the MIT License. Based upon this license the project team highly encourages people who are keen on getting in touch with embedded IoT applications to contribute to this project.","title":"Home"},{"location":"#aws-iot-framework","text":"This frameworks intentions is to simplify the development of back-end applications based on AWS Lamda functions. In addition the goal of this repo is to provide a capable API which allows an easy implementation of Alexa Skills. This repository complements the ESP IoT Framework .","title":"AWS IoT Framework"},{"location":"#motivation","text":"","title":"Motivation"},{"location":"#overview","text":"The networking of sensors and actuators via the internet is becoming increasingly important in industry, but also in the private sector. In this project work it will be shown how a processing chain from the sensor to the cloud service (AWS) can be realized practically. The project aims to provide a valuable overview of what is possible with embedded/connected IoT devices that can transmit data to the cloud. In addition, the projects goal was to provide a secure connection to AWS. Please be aware that this project is a feasibility study. It does not provide code which is ready for production, or similar. Further information about the future intentions of this project can be found here.","title":"Overview"},{"location":"#opensource","text":"This project can be accessed via the MIT License. Based upon this license the project team highly encourages people who are keen on getting in touch with embedded IoT applications to contribute to this project.","title":"OpenSource"},{"location":"alexa/","text":"","title":"Index"},{"location":"aws/cli/configuration-basics/","text":"Configuration basics This repository initilitzes and configures a docker container which already installs the AWS CLI inside. In order to maintain a good security policy, the configuration of the AWS CLI can't be done in advance. To use all features this repository provides, the AWS CLI needs to be configures right after cloning and initalizing the docker container Setup IAM and AWS Security The setup is rather easy. First make sure that your AWS account has a key pair for authentication in the terminal. This part part is often done by an AWS administrator account, who can manage all users. Open the IAM Console Click on users and select the desired user Head over to Security credentials / Access key Click on Create Access key Next an overlay will pop up and provide you with a downloadable .csv file which stores your: AWS Acess Key ID AWS Secret Access Key Keep in mind: the .csv is just downloadable once! Configure the terminal With your key pair ready to go, the next step is the configuration of your AWS CLI instance Therfore type: $ aws configure Next there should be guided interface which lets you fill in your credentials AWS Access Key ID [ None ] : your ID AWS Secret Access Key [ None ] : your Secret Default region name [ None ] : your default region Default output format [ None ] : json Additional information A detailed configuration documentation can be found at: https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-quickstart.html","title":"CLI"},{"location":"aws/cli/configuration-basics/#configuration-basics","text":"This repository initilitzes and configures a docker container which already installs the AWS CLI inside. In order to maintain a good security policy, the configuration of the AWS CLI can't be done in advance. To use all features this repository provides, the AWS CLI needs to be configures right after cloning and initalizing the docker container","title":"Configuration basics"},{"location":"aws/cli/configuration-basics/#setup","text":"","title":"Setup"},{"location":"aws/cli/configuration-basics/#iam-and-aws-security","text":"The setup is rather easy. First make sure that your AWS account has a key pair for authentication in the terminal. This part part is often done by an AWS administrator account, who can manage all users. Open the IAM Console Click on users and select the desired user Head over to Security credentials / Access key Click on Create Access key Next an overlay will pop up and provide you with a downloadable .csv file which stores your: AWS Acess Key ID AWS Secret Access Key Keep in mind: the .csv is just downloadable once!","title":"IAM and AWS Security"},{"location":"aws/cli/configuration-basics/#configure-the-terminal","text":"With your key pair ready to go, the next step is the configuration of your AWS CLI instance Therfore type: $ aws configure Next there should be guided interface which lets you fill in your credentials AWS Access Key ID [ None ] : your ID AWS Secret Access Key [ None ] : your Secret Default region name [ None ] : your default region Default output format [ None ] : json","title":"Configure the terminal"},{"location":"aws/cli/configuration-basics/#additional-information","text":"A detailed configuration documentation can be found at: https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-quickstart.html","title":"Additional information"},{"location":"aws/iam/basic-configuration/","text":"Identity and Access Management IAM is a web service that helps to securely control access to AWS resources. In order to operate securely when handling with multiple developers, projects a good access hierarchy is compulsory. Link to the docs Users Root When creating a AWS account the first user is the root user, which owns the account, has all access rights. This account provides the billing information, has the ability to change the password of all other sub-users . This level of access can be dangerous when handling with lower-level tasks, so it's recommended to not use the root user credentials for everyday development/access. Administrator The Administrator user has almost the same access rights as the root. The biggest exception is that the Administrator is not the owner of the account. An Administrator can be used for managing the rest of the Accounts with a extra level of security. Developer Multiple developer accounts can be created. They do have access to the certain resource in which they are building the desired Application. Groups and Policies Summed up, those two sections are used to an easier management of different resource distribution. Warning This summary is only a rough overview of the complex functionality of AWS IAM. In order to get a deeper understanding reading the docs is mandatory!","title":"Identity and Access Management"},{"location":"aws/iam/basic-configuration/#identity-and-access-management","text":"IAM is a web service that helps to securely control access to AWS resources. In order to operate securely when handling with multiple developers, projects a good access hierarchy is compulsory. Link to the docs","title":"Identity and Access Management"},{"location":"aws/iam/basic-configuration/#users","text":"","title":"Users"},{"location":"aws/iam/basic-configuration/#root","text":"When creating a AWS account the first user is the root user, which owns the account, has all access rights. This account provides the billing information, has the ability to change the password of all other sub-users . This level of access can be dangerous when handling with lower-level tasks, so it's recommended to not use the root user credentials for everyday development/access.","title":"Root"},{"location":"aws/iam/basic-configuration/#administrator","text":"The Administrator user has almost the same access rights as the root. The biggest exception is that the Administrator is not the owner of the account. An Administrator can be used for managing the rest of the Accounts with a extra level of security.","title":"Administrator"},{"location":"aws/iam/basic-configuration/#developer","text":"Multiple developer accounts can be created. They do have access to the certain resource in which they are building the desired Application.","title":"Developer"},{"location":"aws/iam/basic-configuration/#groups-and-policies","text":"Summed up, those two sections are used to an easier management of different resource distribution. Warning This summary is only a rough overview of the complex functionality of AWS IAM. In order to get a deeper understanding reading the docs is mandatory!","title":"Groups and Policies"},{"location":"aws/timestream/ts/","text":"Setting up AWS Timestream Generally two parts are needed for the setup. Timestream IOT Core Quick Guide Got to AWS Timestream, Databases and create a new database. Sample database Type a Name for the database. Choose sample data sets: IoT Multi-measure records Create database Open the database, go to table and create a new table. Type a table name. Choose a Memory store retention time. Choose a Magnetic store retention time. Optional: Enable magnetic storage writes . Create table Go to IoT Core, Handeln, Regeln and create a new one. Type a name for the rule. Type a SQL query. SQL Guide Add an action. Choose database and table. Add the dimensions. Create or add a Role. Create Rule. Activate the rule. Timestream This is the description on how to set up AWS Timestream. Database One database is needed for every fleet. Database Table Rule For example: If you want to measure with 3 microcontrolers indoor and with 5 outdoor without any connection between indoor and outdoor, it is recommended to create two databases. Go to Amazone Timestream: Select database and klick an create database to start creating a new one. Choose the database configuration as shown. After clicking on create database you should see an message Succcesfully created database... , if not an error accured and you have to recreate it. The database is now created with one Table named IoTMulti . This Table is not needed for our setup. Table For each device a new table is needed. Database Table Rule After clicking on the previous created database, go to the tap Tables und klick on Create table. Type a Name for your Table and choose a time for the memory and the magnetic store. Click on Create table. Optional: Enable magnetic storage writes. After klicking on create table you should see a message Succcesfully created table... , if not an error accured and you have to recreate it. IOT Core Description on how to setup the IoT Core for your devices. The database and table to which the data should be sent must exist. If not check Chapter Timestream Database Table Rule Create a Rule Go to IoT Core. Select handle, rule and click create. Give a name to the rule and add a query statement. SQL Guide SELECT value FROM 'topic/subtopic_for_device_one/#' Add an Action This tell AWS where the data should be send to. Scroll down, select Write a message to timestream table and click on configure action. Select the database and the table. Add the Dimensions acoording to the sheme: Dimensionsname Dimension value ID ${MAC_ADRESS} Name ${DEVICE_NAME} Sensor Type ${SENSOR_TYPE} SensorID ${UNIQUE_SENSOR_ID} Value ${VALUE} Unit ${UNIT} MeasurementTime ${TIME} Add or create a Role. Add a Role Give the role a name. Click on add action. Click on create rule. After clicking on create you should see a message Rule succcesfully created , if not an error accured and you have to recreate it. Press on the three dots and select activate. After clicking on activate you should see a message Rule succcesfully activated , if not an error accured and you have to recreate it. Database Table Rule Setup is done now.","title":"Timestream"},{"location":"aws/timestream/ts/#setting-up-aws-timestream","text":"Generally two parts are needed for the setup. Timestream IOT Core","title":"Setting up AWS Timestream"},{"location":"aws/timestream/ts/#quick-guide","text":"Got to AWS Timestream, Databases and create a new database. Sample database Type a Name for the database. Choose sample data sets: IoT Multi-measure records Create database Open the database, go to table and create a new table. Type a table name. Choose a Memory store retention time. Choose a Magnetic store retention time. Optional: Enable magnetic storage writes . Create table Go to IoT Core, Handeln, Regeln and create a new one. Type a name for the rule. Type a SQL query. SQL Guide Add an action. Choose database and table. Add the dimensions. Create or add a Role. Create Rule. Activate the rule.","title":"Quick Guide"},{"location":"aws/timestream/ts/#timestream","text":"This is the description on how to set up AWS Timestream.","title":"Timestream"},{"location":"aws/timestream/ts/#database","text":"One database is needed for every fleet. Database Table Rule For example: If you want to measure with 3 microcontrolers indoor and with 5 outdoor without any connection between indoor and outdoor, it is recommended to create two databases. Go to Amazone Timestream: Select database and klick an create database to start creating a new one. Choose the database configuration as shown. After clicking on create database you should see an message Succcesfully created database... , if not an error accured and you have to recreate it. The database is now created with one Table named IoTMulti . This Table is not needed for our setup.","title":"Database"},{"location":"aws/timestream/ts/#table","text":"For each device a new table is needed. Database Table Rule After clicking on the previous created database, go to the tap Tables und klick on Create table. Type a Name for your Table and choose a time for the memory and the magnetic store. Click on Create table. Optional: Enable magnetic storage writes. After klicking on create table you should see a message Succcesfully created table... , if not an error accured and you have to recreate it.","title":"Table"},{"location":"aws/timestream/ts/#iot-core","text":"Description on how to setup the IoT Core for your devices. The database and table to which the data should be sent must exist. If not check Chapter Timestream Database Table Rule","title":"IOT Core"},{"location":"aws/timestream/ts/#create-a-rule","text":"Go to IoT Core. Select handle, rule and click create. Give a name to the rule and add a query statement. SQL Guide SELECT value FROM 'topic/subtopic_for_device_one/#'","title":"Create a Rule"},{"location":"aws/timestream/ts/#add-an-action","text":"This tell AWS where the data should be send to. Scroll down, select Write a message to timestream table and click on configure action. Select the database and the table. Add the Dimensions acoording to the sheme: Dimensionsname Dimension value ID ${MAC_ADRESS} Name ${DEVICE_NAME} Sensor Type ${SENSOR_TYPE} SensorID ${UNIQUE_SENSOR_ID} Value ${VALUE} Unit ${UNIT} MeasurementTime ${TIME} Add or create a Role.","title":"Add an Action"},{"location":"aws/timestream/ts/#add-a-role","text":"Give the role a name. Click on add action. Click on create rule. After clicking on create you should see a message Rule succcesfully created , if not an error accured and you have to recreate it. Press on the three dots and select activate. After clicking on activate you should see a message Rule succcesfully activated , if not an error accured and you have to recreate it. Database Table Rule Setup is done now.","title":"Add a Role"}]}